/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kubernetes-incubator/external-storage/snapshot/pkg/apis/volumesnapshot.external-storage.k8s.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VolumeSnapshotDataLister helps list VolumeSnapshotDatas.
type VolumeSnapshotDataLister interface {
	// List lists all VolumeSnapshotDatas in the indexer.
	List(selector labels.Selector) (ret []*v1.VolumeSnapshotData, err error)
	// VolumeSnapshotDatas returns an object that can list and get VolumeSnapshotDatas.
	VolumeSnapshotDatas(namespace string) VolumeSnapshotDataNamespaceLister
	VolumeSnapshotDataListerExpansion
}

// volumeSnapshotDataLister implements the VolumeSnapshotDataLister interface.
type volumeSnapshotDataLister struct {
	indexer cache.Indexer
}

// NewVolumeSnapshotDataLister returns a new VolumeSnapshotDataLister.
func NewVolumeSnapshotDataLister(indexer cache.Indexer) VolumeSnapshotDataLister {
	return &volumeSnapshotDataLister{indexer: indexer}
}

// List lists all VolumeSnapshotDatas in the indexer.
func (s *volumeSnapshotDataLister) List(selector labels.Selector) (ret []*v1.VolumeSnapshotData, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VolumeSnapshotData))
	})
	return ret, err
}

// VolumeSnapshotDatas returns an object that can list and get VolumeSnapshotDatas.
func (s *volumeSnapshotDataLister) VolumeSnapshotDatas(namespace string) VolumeSnapshotDataNamespaceLister {
	return volumeSnapshotDataNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VolumeSnapshotDataNamespaceLister helps list and get VolumeSnapshotDatas.
type VolumeSnapshotDataNamespaceLister interface {
	// List lists all VolumeSnapshotDatas in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.VolumeSnapshotData, err error)
	// Get retrieves the VolumeSnapshotData from the indexer for a given namespace and name.
	Get(name string) (*v1.VolumeSnapshotData, error)
	VolumeSnapshotDataNamespaceListerExpansion
}

// volumeSnapshotDataNamespaceLister implements the VolumeSnapshotDataNamespaceLister
// interface.
type volumeSnapshotDataNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VolumeSnapshotDatas in the indexer for a given namespace.
func (s volumeSnapshotDataNamespaceLister) List(selector labels.Selector) (ret []*v1.VolumeSnapshotData, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VolumeSnapshotData))
	})
	return ret, err
}

// Get retrieves the VolumeSnapshotData from the indexer for a given namespace and name.
func (s volumeSnapshotDataNamespaceLister) Get(name string) (*v1.VolumeSnapshotData, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("volumesnapshotdata"), name)
	}
	return obj.(*v1.VolumeSnapshotData), nil
}
